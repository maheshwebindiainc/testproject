<?php
/*
Plugin Name: WP FAQ
Plugin URL: 
Description: Quick FAQ plugin
Version: 3.1
Author: Mahesh Patel
Author URI:
*/

function sp_faq_setup_post_types() {
	$festivals_labels =  apply_filters( 'sp_faq_labels', array(
		'name'                => 'FAQs',
		'singular_name'       => 'FAQ',
		'add_new'             => __('Add New', 'sp_faq'),
		'add_new_item'        => __('Add New FAQ', 'sp_faq'),
		'edit_item'           => __('Edit FAQ', 'sp_faq'),
		'new_item'            => __('New FAQ', 'sp_faq'),
		'all_items'           => __('All FAQ', 'sp_faq'),
		'view_item'           => __('View FAQ', 'sp_faq'),
		'search_items'        => __('Search FAQ', 'sp_faq'),
		'not_found'           => __('No FAQ found', 'sp_faq'),
		'not_found_in_trash'  => __('No FAQ found in Trash', 'sp_faq'),
		'parent_item_colon'   => '',
		'menu_name'           => __('FAQ', 'sp_faq'),
		'exclude_from_search' => true
	) );
	$faq_args = array(
		'labels' 			=> $festivals_labels,
		'public' 			=> true,
		'publicly_queryable'=> true,
		'show_ui' 			=> true,
		'show_in_menu' 		=> true,
		'query_var' 		=> true,
		'capability_type' 	=> 'post',
		'has_archive' 		=> true,
		'hierarchical' 		=> false,
		'menu_icon'   => 'dashicons-info',
		'supports' => array('title','editor','thumbnail','excerpt'),
		'taxonomies' => array('category', 'post_tag')
	);
	register_post_type( 'sp_faq', apply_filters( 'sp_faq_post_type_args', $faq_args ) );
}
add_action('init', 'sp_faq_setup_post_types');
/*
 * Add [sp_faq limit="-1"] shortcode
 *
 */
function sp_faq_shortcode( $atts, $content = null ) {
	extract(shortcode_atts(array(
		"limit" => '',
		"category" => '',
	), $atts));
	// Define limit
	if( $limit ) { 
		$posts_per_page = $limit; 
	} else {
		$posts_per_page = '-1';
	}
	// Define limit
	if( $category ) { 
		$cat = $category; 
	} else {
		$cat = '';
	}
	ob_start();
	// Create the Query
	$post_type 		= 'sp_faq';
	$orderby 		= 'post_date';
	$order 			= 'DESC';
	$query = new WP_Query( array ( 
								'post_type'      => $post_type,
								'posts_per_page' => $posts_per_page,
								'orderby'        => $orderby, 
								'order'          => $order,
								'cat'          =>   $cat,
								'no_found_rows'  => 1
								) 
						);
	//Get post type count
	$post_count = $query->post_count;
	$i = 1;
	// Displays Custom post info
	if( $post_count > 0) :
	?>
	 <div class="accordion faq">
	<?php
		// Loop 
		while ($query->have_posts()) : $query->the_post();
		?>
		 <h4> <?php the_title(); ?></h4>
		 <div>
<div><?php
                  if ( function_exists('has_post_thumbnail') && has_post_thumbnail() ) {
                    the_post_thumbnail('thumbnail'); 
                  }
                  ?>
				  </div>
				  <?php the_content(); ?></div>
		<?php
		$i++;
		endwhile; ?>
		</div>
<?php	endif;
	// Reset query to prevent conflicts
	wp_reset_query();
	?>
	<?php
	return ob_get_clean();
}
	add_shortcode("sp_faq", "sp_faq_shortcode");
	wp_register_style( 'accordioncss', plugin_dir_url( __FILE__ ) . 'css/jqueryuicss.css' );
	wp_enqueue_style( 'accordioncss' );
	
function add_custom_scripts() {
	wp_enqueue_script( 'custom-script', plugin_dir_url( __FILE__ ) . 'js/accordion.js', array('jquery-ui-accordion') );
}

add_action( 'wp_head', 'add_custom_scripts' );
add_action( 'wp_head', 'faq_option_script' );
function faq_option_script()
{
	$option = 'faq_option';
	$faq_options = get_option( $option);  
	$data_collapsible = $faq_options['faq_collapsible'];
	$data_animate = $faq_options['faq_animate'];
	$data_active = $faq_options['faq_active'];
    
	$data  = '';
    $data .= 'data-active="'.( $data_active    == "1"  ? 'true' : 'false' ).'" ';
    $data .= 'data-animate="'.   ( $data_animate  == "0"  ? 'false' : 'true' ).'" ';
    $data .= 'data-collapsible="'.  ( $data_collapsible == "1"  ? 'true' : 'false' ).'"';

    $id     = "faq-accordion-1";
    $class  = 'faq-plugin-accordion';

    echo '<div id="'.$id.'" class="'.$class.'" '.$data.'></div>';
}

class SP_faq_setting
{
    /**
     * Holds the values to be used in the fields callbacks
     */
    private $options;

    /**
     * Start up
     */
    public function __construct()
    {
        add_action( 'admin_menu', array( $this, 'add_faq_page' ) );
        add_action( 'admin_init', array( $this, 'page_init_faq' ) );
    }

    /**
     * Add options page
     */
    public function add_faq_page()
    {
        // This page will be under "Settings"
        add_options_page(
            'Settings Admin', 
            'Faq Settings', 
            'manage_options', 
            'faq-setting-admin', 
            array( $this, 'create_faqadmin_page' )
        );
    }

    /**
     * Options page callback
     */
    public function create_faqadmin_page()
    {
        // Set class property
        $this->options = get_option( 'faq_option' );
        ?>
        <div class="wrap">
            <?php screen_icon(); ?>           
            <form method="post" action="options.php">
            <?php
                // This prints out all hidden setting fields
                settings_fields( 'faq_option_group' );   
                do_settings_sections( 'faq-setting-admin' );
                submit_button(); 
            ?>
            </form>
        </div>
        <?php
    }

    /**
     * Register and add settings
     */
    public function page_init_faq()
    {        
        register_setting(
            'faq_option_group', // Option group
            'faq_option', // Option name
            array( $this, 'sanitize' ) // Sanitize
        );

        add_settings_section(
            'setting_section_id', // ID
            'Faq Settings', // Title
            array( $this, 'print_section_info' ), // Callback
            'faq-setting-admin' // Page
        );  
        add_settings_field(
            'faq_collapsible', 
            'Collapsible', 
            array( $this, 'faq_collapsible_callback' ), 
            'faq-setting-admin', 
            'setting_section_id'
        );      
		add_settings_field(
            'faq_animate', // ID
            'Animate', // Title 
            array( $this, 'faq_animate_callback' ), // Callback
            'faq-setting-admin', // Page
            'setting_section_id' // Section           
        );      

        add_settings_field(
            'faq_active', 
            'Active', 
            array( $this, 'faq_active_callback' ), 
            'faq-setting-admin', 
            'setting_section_id'
        );     
	
    }

    /**
     * Sanitize each setting field as needed
     *
     * @param array $input Contains all settings fields as array keys
     */
    public function sanitize( $input )
     {
        $new_input = array();
        if( isset( $input['faq_collapsible'] ) )
            $new_input['faq_collapsible'] = sanitize_text_field( $input['faq_collapsible'] );
		
		 if( isset( $input['faq_animate'] ) )
            $new_input['faq_animate'] = sanitize_text_field( $input['faq_animate'] );
			
		 if( isset( $input['faq_active'] ) )
            $new_input['faq_active'] = sanitize_text_field( $input['faq_active'] );	

        return $new_input;
    }

    /** 
     * Print the Section text
     */
    public function print_section_info()
    {
        print 'Enter your settings below:';
    }


    /** 
     * Get the settings option array and print one of its values
     */
    public function faq_collapsible_callback()
    {
        printf(
            '<input type="text" id="faq_collapsible" name="faq_option[faq_collapsible]" value="%s" />',
            isset( $this->options['faq_collapsible'] ) ? esc_attr( $this->options['faq_collapsible']) : ''
        );
		printf(' Enter "0" for <b> false</b> and "1" for <b> true</b><br>');
        printf('<em style="font-size:11px;">This option when set to true, it allows users to close a menu by clicking on it.By default its value is false.</em>');
        
    }
	 public function faq_animate_callback()
    {
        printf(
            '<input type="text" id="faq_animate" name="faq_option[faq_animate]" value="%s" />',
            isset( $this->options['faq_animate'] ) ? esc_attr( $this->options['faq_animate']) : ''
        );
		printf(' Enter "0" for <b> false</b> and "1" for <b> true</b><br>');
        printf('<em style="font-size:11px;">This option is used to set how to animate changing panels.  </em>');
    }

    /** 
     * Get the settings option array and print one of its values
     */
    public function faq_active_callback()
    {
        printf(
            '<input type="text" id="faq_active" name="faq_option[faq_active]" value="%s" />',
            isset( $this->options['faq_active'] ) ? esc_attr( $this->options['faq_active']) : ''
        );
		printf(' Enter "0" for <b> false</b> and "1" for <b> true</b><br>');
        printf('<em style="font-size:11px;">Indicates the index of the menu that is open when the page is first accessed. By default its value is 0.</em>');
    }
}

if( is_admin() )
    $my_faqsettings_page = new SP_faq_setting();